# -*- coding: utf-8 -*-
"""Copy of Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1is9-ZGi86xNALUXiz---TtWhLzkK1S4J

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** [Input Nama]
- **Email:** [Input Email]
- **ID Dicoding:** [Input Username]

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1
- Pertanyaan 2

## Import Semua Packages/Library yang Digunakan
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

# Load dataset harian dan per jam
df_day = pd.read_csv("day.csv")
df_hour = pd.read_csv("hour.csv")

"""**Insight:**
- pd.read_csv("day.csv") → Mengambil data dari file CSV untuk dataset harian.
- pd.read_csv("hour.csv") → Mengambil data dari file CSV untuk dataset per jam.

### Assessing Data
"""

# Cek informasi dataset harian
print("Informasi dataset harian:")
print(df_day.info())

# Cek informasi dataset per jam
print("\nInformasi dataset per jam:")
print(df_hour.info())

"""**Insight:**
- df_day.info() → Melihat tipe data, jumlah data, dan apakah ada nilai yang hilang pada dataset harian.
- df_hour.info() → Melihat tipe data, jumlah data, dan apakah ada nilai yang hilang pada dataset per jam.

### Cleaning Data
"""

# Hapus kolom 'instant' karena tidak diperlukan
df_day.drop(columns=['instant'], inplace=True)
df_hour.drop(columns=['instant'], inplace=True)

# Konversi kolom tanggal ke format datetime
df_day['dteday'] = pd.to_datetime(df_day['dteday'])
df_hour['dteday'] = pd.to_datetime(df_hour['dteday'])

# Cek hasil setelah cleaning
print(df_day.info())
print(df_hour.info())

"""**Insight:**
- Kolom instant dihapus karena hanya berfungsi sebagai indeks, tidak relevan untuk analisis.
- Kolom dteday diubah ke format datetime untuk memudahkan analisis berbasis waktu.
- Mengecek kembali struktur data setelah proses cleaning, memastikan tidak ada tipe data yang salah atau kolom yang tidak diperlukan.

## Exploratory Data Analysis (EDA)

### Explore ...
"""

# Menentukan tren peminjaman sepeda per bulan berdasarkan dataset harian
df_day.groupby(["mnth", "yr"])["cnt"].mean()

# Menentukan rata-rata peminjaman sepeda berdasarkan jam dalam sehari
df_hour.groupby("hr")["cnt"].mean()

"""**Insight:**
- Mengelompokkan (groupby()) data berdasarkan bulan (mnth) dan tahun (yr).
Menghitung rata-rata jumlah peminjaman sepeda (cnt) di setiap bulan untuk memahami pola penggunaan.
- Mengelompokkan (groupby()) data berdasarkan jam (hr).
Menghitung rata-rata jumlah peminjaman sepeda (cnt) pada setiap jam dalam sehari untuk melihat pola harian penggunaan sepeda.

## Visualization & Explanatory Analysis

### Pertanyaan 1:

1. Pada bulan apa peminjaman sepeda tertinggi dan terendah?
"""

# Mengatur gaya visualisasi
sns.set_style("whitegrid")

# Membuat visualisasi jumlah peminjaman sepeda per bulan
plt.figure(figsize=(12, 6))
sns.barplot(data=df_day, x="mnth", y="cnt", estimator="mean", palette="coolwarm")

# Mengatur label dan judul
plt.xticks(ticks=range(0, 12), labels=["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des"])
plt.xlabel("Bulan")
plt.ylabel("Rata-rata Peminjaman Sepeda")
plt.title("Rata-rata Peminjaman Sepeda per Bulan")

# Menampilkan grafik
plt.show()

"""### Pertanyaan 2:

2. Bagaimana pola peminjaman sepeda berdasarkan waktu dalam sehari?
"""

# Membuat visualisasi peminjaman sepeda berdasarkan jam dalam sehari
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_hour, x="hr", y="cnt", estimator="mean", ci=None, marker="o", color="b")

# Mengatur label dan judul
plt.xticks(range(0, 24))
plt.xlabel("Jam dalam Sehari")
plt.ylabel("Rata-rata Peminjaman Sepeda")
plt.title("Rata-rata Peminjaman Sepeda per Jam")

# Menampilkan grafik
plt.show()

"""**Insight:**
- Grafik ini menunjukkan pola peminjaman sepeda berdasarkan jam dalam sehari.
- Puncak peminjaman terjadi pada jam 07:00–09:00 pagi dan 17:00–19:00 sore, sesuai dengan jam kerja dan jam pulang kerja.

## Analisis Lanjutan (Opsional)
"""



"""## Conclusion

- Jawaban  pertanyaan 1
: Peminjaman tertinggi terjadi pada bulan Juni–September, sedangkan peminjaman terendah terjadi pada bulan Januari–Februari. Ini menunjukkan bahwa cuaca mungkin berpengaruh pada jumlah peminjaman.

- Jawaban  pertanyaan 2
Peminjaman sepeda mencapai puncaknya pada jam 07:00–09:00 pagi dan 17:00–19:00 sore, yang berkaitan dengan waktu berangkat dan pulang kerja.
"""

#pip install streamlit

# Load dataset
df_day = pd.read_csv("day.csv")
df_hour = pd.read_csv("hour.csv")

# Konversi kolom tanggal ke format datetime
df_day['dteday'] = pd.to_datetime(df_day['dteday'])
df_hour['dteday'] = pd.to_datetime(df_hour['dteday'])

# Konversi kolom 'yr' dan 'mnth' agar lebih mudah dibaca
df_day["yr"] = df_day["yr"].map({0: "2011", 1: "2012"})
df_day["mnth"] = df_day["mnth"].map({1: "Jan", 2: "Feb", 3: "Mar", 4: "Apr", 5: "Mei", 6: "Jun",
                                     7: "Jul", 8: "Agu", 9: "Sep", 10: "Okt", 11: "Nov", 12: "Des"})

# Sidebar untuk filter tahun
st.sidebar.header("Filter Data")
selected_year = st.sidebar.selectbox("Pilih Tahun:", df_day["yr"].unique())

# Filter dataset berdasarkan tahun yang dipilih
df_filtered = df_day[df_day["yr"] == selected_year]

# Judul utama
st.title("📊 Dashboard Peminjaman Sepeda")

# 1. Visualisasi Peminjaman Sepeda per Bulan**
st.subheader("📅 Tren Peminjaman Sepeda per Bulan")

plt.figure(figsize=(12, 6))
sns.barplot(data=df_filtered, x="mnth", y="cnt", estimator="mean", palette="coolwarm")
plt.xlabel("Bulan")
plt.ylabel("Rata-rata Peminjaman Sepeda")
plt.title(f"Rata-rata Peminjaman Sepeda per Bulan ({selected_year})")
plt.xticks(rotation=45)

st.pyplot(plt)  # Menampilkan plot di Streamlit

# 2. Visualisasi Peminjaman Sepeda berdasarkan Jam dalam Sehari**
st.subheader("⏰ Pola Peminjaman Sepeda per Jam dalam Sehari")

plt.figure(figsize=(12, 6))
sns.lineplot(data=df_hour, x="hr", y="cnt", estimator="mean", ci=None, marker="o", color="b")
plt.xlabel("Jam dalam Sehari")
plt.ylabel("Rata-rata Peminjaman Sepeda")
plt.title("Rata-rata Peminjaman Sepeda per Jam")

st.pyplot(plt)  # Menampilkan plot di Streamlit

# Menampilkan informasi tambahan
st.sidebar.markdown("🚲 **Dashboard ini membantu memahami pola peminjaman sepeda berdasarkan data historis.**")